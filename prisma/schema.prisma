// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

enum Visibility {
  Private
  Protected
  Public
}

enum Type {
  Text
  Link
  Image
  Poll
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String // name of the user e.g "Foo"
  content String? // description of the user e.g "I'm a Star Wars fan!"
  email   String   @unique
  socials String[] // social links

  role       Role       @default(User) // is he a super-admin?
  visibility Visibility @default(Protected) // can other people see his socials?

  orgs     UsersOnOrg[]
  posts    Post[]
  comments Comment[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  closesAt  DateTime // When is the post no longer active for interactivity

  name       String // Title of the post
  type       Type
  content    String
  visibility Visibility @default(Protected)

  author   User      @relation(references: [id], fields: [authorId])
  authorId Int
  org      Org       @relation(references: [id], fields: [orgId])
  orgId    Int
  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content    String
  visibility Visibility @default(Public)

  post     Post @relation(references: [id], fields: [postId])
  postId   Int
  author   User @relation(references: [id], fields: [authorId])
  authorId Int
}

model Org {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  content    String // Description of the Org
  visibility Visibility @default(Protected)

  users UsersOnOrg[]
  posts Post[]
}

model UsersOnOrg {
  org    Org  @relation(fields: [orgId], references: [id])
  orgId  Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role

  @@id([orgId, userId])
}
